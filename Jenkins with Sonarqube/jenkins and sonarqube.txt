 				|| Jenkins ||


Installation of Jenkins (/root)
•	sudo apt-get update -y
•	sudo apt-get upgrade -y
•	sudo apt-cache search openjdk
•	sudo apt-get install openjdk-8-jdk
•	java -version
•	wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -
•	sudo vi /etc/apt/sources.list --> deb https://pkg.jenkins.io/debian-stable binary/
•	sudo apt-get update -y
•	sudo apt-cache search jenkins
•	apt-cache madison jenkins
•	sudo apt-get install jenkins -y
•	sudo service jenkins status
•	cat /var/lib/jenkins/secrets/initialAdminPassword
Setting Webhook(Github)
•	Go to particular repository
•	Go to repository setting
•	Go to webhook
•	Add wedhook ----------  http://50.112.233.96:8080/github-webhook   http://3.0.12.145:8080/github-webhook
•	save

Connect Jenkins with Backend Server (/home/ubuntu)
•	ls -a
•	cd .ssh/
•	ssh-keygen
•	ls
•       cat id_rsa  --------copy credential and paste in var/bin/jenkins/jenkins.pem
•	cat id_rsa.pub    -------------- copy public key and paste in on backend server’s authorized key 
•	go to backend server
•	ls -a
•	cd .ssh/
•	ssh-keygen
•	ls
•	sudo nano authorized_keys     
•	sudo chown -R ubuntu:ubuntu /home/ubuntu/new_chatapp
Creating pipeline in Jenkins
Install ssh agent plugins 
Create credential for SSH Agent [
•	go to Jenkins server 
•	cd .ssh/
•	ls
•	cat id_rsa --------- copy the content in credential add section ]
Pipeline Syntax :


pipeline{
    agent any
    stages{
        stage("git"){
            steps{
                git 'https://github.com/SonaliAgivale/new_chatapp.git'
            }
        }

stage('build') {
            steps {
               sshagent(['jenkins-deploy']){
                   sh "scp -r -o StrictHostKeyChecking=no fundoo/fundooapp/templates/index.html ubuntu@10.0.1.78:/home/ubuntu/new_chatapp/fundoo/fundooapp/templates"
               }
            }
        }
stage('deploy') {
            steps {
               sh 'ssh -i /var/lib/jenkins/jenkins.pem ubuntu@10.0.1.78 "bash /home/ubuntu/new_chatapp/scripts/Start_Server.sh"'
               }
            }
    }
}

-------------------------------------------------------------------------------------------------------------------------
Command For install SonarQube on Ubuntu
-Create SonarQube Server using EC2 instance
-while  creating instatnce add rule make custom tcp 9000 bcz sonarqube port no is 9000
-Install sonarqube on same server
-https://www.vultr.com/docs/install-sonarqube-on-ubuntu-20-04-lts/
-Use above link for install sonarqube

-Login to SonarQube Server 
-Create Project inside the sonar server-->click on localy
-Click on Generate the token 
-Copy generated Token paste in notepad

-Go to the Jenkins server
-Manage Jenkins-->go to manage credential -- create a new credentials using secret text and paste the generated token from sonarqube project
-Go to Manage Jenkins --->configure system --> go to sonarqube add name along with the IP Server address of Sonarqube | Ex: http://localhost:9000
-install sonarqube scanner plugins 
-go to manage Jenkins -- Global tool configuration --- add sonarqube scanner with sonarqube credential --> click onn add and save (this step run when you install sonar scanner)

-Create Pipeline for application.
pipeline{
    agent any
    stages{
        stage("git"){
            steps{
                git 'https://github.com/SonaliAgivale/new_chatapp.git'
            }
        }
stage ("SonarQube Analysis") {
            steps {
                script {
                    def scannerHome = tool 'SonarQubeScanner'; 
                    withSonarQubeEnv('sonarqube') {  
                         sh "${tool("SonarQubeScanner")}/bin/sonar-scanner -Dsonar.projectKey=sonar_qube -Dsonar.projectName=new-chat-app" 
                    }
                }
            }
        }
stage('build') {
            steps {
               sshagent(['jenkins-deploy']){
                   sh "scp -r -o StrictHostKeyChecking=no fundoo/fundooapp/templates/index.html ubuntu@10.0.1.78:/home/ubuntu/new_chatapp/fundoo/fundooapp/templates"
               }
            }
        }
stage('deploy') {
            steps {
               sh 'ssh -i /var/lib/jenkins/jenkins.pem ubuntu@10.0.1.78 "bash /home/ubuntu/new_chatapp/scripts/Start_Server.sh"'
               }
            }
    }
}

-Build The pipeline and check its run or not.
-if it execute successfully just check GUI inside sonar qube the link is inside the console output  click on that link and redirect the sonarqube page.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Jenkins using Sonarqube with quality gate :
Go to sonarqube server --- project -- add webhook -- give name to webhook --- http//:21.0.3.4:8080/sonarqube-webhook
Go to sonarqube server --- quality gates --- create new quality gate with condition --- select all option in project
Pipeline Syntax : (using sonarqube and quality gate)
pipeline{
    agent any
    stages{
        stage("git"){
            steps{
                git 'https://github.com/Priya412-coder/new_chatapp-1.git'
            }
        }
stage ("SonarQube Analysis") {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner'; --- scanner name that we have given in global tool config
                    withSonarQubeEnv('sonarqube') { ---------------- sonarqube name that we have give in config system 
                         sh "${tool("sonar-scanner")}/bin/sonar-scanner -Dsonar.projectKey=sonar_qube -Dsonar.projectName=new-chat-app"  (Note: Projectkey is credential key for sonarqube and project name is the name you have given to project in sonarqube)
                    }
                }
            }
stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }

        }
stage('build') {
            steps {
               sshagent(['jenkins-deploy']) {
                   sh "scp -r -o StrictHostKeyChecking=no fundoo ubuntu@10.0.1.127:/home/ubuntu/new_chatapp "
               }
            }
        }
stage('deploy') {
            steps {
               sh 'ssh -i /var/lib/jenkins/jenkins.pem ubuntu@10.0.1.127 "bash /home/ubuntu/new_chatapp/scripts/Start_Server.sh"'
               }
            }














								

